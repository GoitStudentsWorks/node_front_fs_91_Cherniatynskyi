{"version":3,"file":"static/js/260.30b0d580.chunk.js","mappings":"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","sources":["webpack://task-pro/./src/components/Auth/Auth.module.css?93a7","components/Auth/Register.jsx","components/Auth/Login.jsx","components/Auth/AuthNav.jsx","pages/AuthPage/AuthPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"authPageWrapper\":\"Auth_authPageWrapper__QiGyE\",\"authForm\":\"Auth_authForm__-Et2v\",\"registerForm\":\"Auth_registerForm__FTXoS\",\"loginForm\":\"Auth_loginForm__LVUAX\",\"authNav\":\"Auth_authNav__kGdXJ\",\"authLink1\":\"Auth_authLink1__G6iFP\",\"authLink2\":\"Auth_authLink2__ZGHwE\",\"linkActive\":\"Auth_linkActive__EmJKO\",\"Form\":\"Auth_Form__XPxnG\",\"fieldWrapper\":\"Auth_fieldWrapper__B6Zfo\",\"field\":\"Auth_field__w1nrX\",\"field_password\":\"Auth_field_password__Mk5Yq\",\"notError\":\"Auth_notError__XqP9N\",\"button\":\"Auth_button__oOib1\",\"iconBtn\":\"Auth_iconBtn__QA+XP\",\"passwordWrapper\":\"Auth_passwordWrapper__PlJo7\",\"svg\":\"Auth_svg__vCzBa\",\"errorMessage\":\"Auth_errorMessage__-2mWy\",\"slideIn\":\"Auth_slideIn__V2rlc\",\"loaderBackdrop\":\"Auth_loaderBackdrop__Us2ZZ\"};","import React from 'react';\nimport { useState } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport css from './Auth.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registerThunk } from '../../redux/auth/authThunks';\nimport sprite from '../../images/sprite.svg';\nimport { Spinner } from 'components/Spinner';\n\nconst emailRegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Name must be at least 6 characters')\n    .max(32, 'Name must be no more than 16 characters')\n    .required('Name is required*'),\n  email: Yup.string()\n    .matches(emailRegExp, 'Enter a valid Email*')\n    .email('Enter a valid Email*')\n    .required('Email is required*'),\n  password: Yup.string()\n    .matches(/^(?=.*[a-z])/, 'Password must meet the requirements*')\n    .min(8, 'Password must be at least 6 characters')\n    .max(64, 'Password must be no more than 16 characters')\n    .required('Password is required*'),\n});\n\nexport const Register = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state=> state.auth.isRefreshing)\n\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const handleClickPasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleSubmit = e => {\n    const { name, email, password } = e;\n\n    dispatch(registerThunk({ name, email, password }));\n\n    // e.reset();\n  };\n\n  return (\n    <>\n    {isLoading && <div className={css.loaderBackdrop}><Spinner></Spinner></div>}\n    <div className={css.registerForm}>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={schema}\n        onSubmit={e => handleSubmit(e)}\n      >\n        {({ errors, touched }) => (\n          <Form className={css.Form}>\n            <div className={css.fieldWrapper}>\n              <Field\n                className={css.field}\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Enter your name\"\n              />\n              {errors.name && touched.name && (\n                <ErrorMessage name=\"name\">\n                  {errorMsg => (\n                    <div className={css.errorMessage}>{errorMsg}</div>\n                  )}\n                </ErrorMessage>\n              )}\n            </div>\n            <div className={css.notError}></div>\n            <div className={css.fieldWrapper}>\n              <Field\n                className={css.field}\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n              />\n              {errors.email && touched.email && (\n                <ErrorMessage name=\"email\">\n                  {errorMsg => (\n                    <div className={css.errorMessage}>{errorMsg}</div>\n                  )}\n                </ErrorMessage>\n              )}\n            </div>\n            <div className={css.notError}></div>\n\n            <div className={`${css.fieldWrapper} ${css.passwordWrapper}`}>\n              <Field\n                className={css.field}\n                id={css.field_password}\n                type={passwordVisible ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Create a password\"\n              />\n              {passwordVisible ? (\n                <button\n                  className={css.iconBtn}\n                  type=\"button\"\n                  onClick={handleClickPasswordVisibility}\n                >\n                  <svg className={css.svg}>\n                    <use href={`${sprite}#icon-eye`} />\n                  </svg>\n                </button>\n              ) : (\n                <button\n                  className={css.iconBtn}\n                  type=\"button\"\n                  onClick={handleClickPasswordVisibility}\n                >\n                  <svg className={css.svg}>\n                    <use href={`${sprite}#icon-eye`} />\n                  </svg>\n                </button>\n              )}\n              {errors.password && touched.password && (\n                <ErrorMessage name=\"password\">\n                  {errorMsg => (\n                    <div className={css.errorMessage}>{errorMsg}</div>\n                  )}\n                </ErrorMessage>\n              )}\n            </div>\n            <div className={css.notError}></div>\n            <button className={css.button} type=\"submit\">\n              Register Now\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div></>\n  );\n};\n\n// * підключити зміну теми\n","import React from 'react';\nimport { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport css from './Auth.module.css';\nimport sprite from '../../images/sprite.svg';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginThunk } from '../../redux/auth/authThunks';\nimport { Spinner } from 'components/Spinner';\n\nconst emailRegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst schema = Yup.object().shape({\n  email: Yup.string()\n    .matches(emailRegExp, 'Enter a valid Email*')\n    .email('Enter a valid Email*')\n    .required('Email is required*'),\n  password: Yup.string()\n    .matches(/^(?=.*[a-z])/, 'Password must meet the requirements*')\n    .min(8, 'Password must be at least 6 characters')\n    .max(64, 'Password must be no more than 16 characters')\n    .required('Password is required*'),\n});\n\nexport const Login = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state=> state.auth.isRefreshing)\n\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  const handleClickPasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleSubmit = e => {\n    const { email, password } = e;\n    dispatch(loginThunk({ email, password }));\n    // form.reset();\n  };\n\n  return (\n    <>\n    {isLoading && <div className={css.loaderBackdrop}><Spinner></Spinner></div>}\n    <div className={css.loginForm}>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={schema}\n        onSubmit={e => handleSubmit(e)}\n      >\n        {({ errors, touched }) => (\n          <Form className={css.Form} autoComplete=\"off\">\n            <div className={css.fieldWrapper}>\n              <Field\n                className={css.field}\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n              />\n              {errors.email && touched.email && (\n                <ErrorMessage name=\"email\">\n                  {errorMsg => (\n                    <div className={css.errorMessage}>{errorMsg}</div>\n                  )}\n                </ErrorMessage>\n              )}\n            </div>\n            <div className={css.notError}></div>\n\n            <div className={`${css.fieldWrapper} ${css.passwordWrapper}`}>\n              <Field\n                className={css.field}\n                id={css.field_password}\n                type={passwordVisible ? 'text' : 'password'}\n                name=\"password\"\n                placeholder=\"Confirm a password\"\n              />\n              {passwordVisible ? (\n                <button\n                  className={css.iconBtn}\n                  type=\"button\"\n                  onClick={handleClickPasswordVisibility}\n                >\n                  <svg className={css.svg}>\n                    <use href={`${sprite}#icon-eye`} />\n                  </svg>\n                </button>\n              ) : (\n                <button\n                  className={css.iconBtn}\n                  type=\"button\"\n                  onClick={handleClickPasswordVisibility}\n                >\n                  <svg className={css.svg}>\n                    <use href={`${sprite}#icon-eye`} />\n                  </svg>\n                </button>\n              )}\n              {errors.password && touched.password && (\n                <ErrorMessage name=\"password\">\n                  {errorMsg => (\n                    <div className={css.errorMessage}>{errorMsg}</div>\n                  )}\n                </ErrorMessage>\n              )}\n            </div>\n            <div className={css.notError}></div>\n\n            <button className={css.button} type=\"submit\">\n              Log In Now\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n    </>\n  );\n};\n","import { NavLink, useParams } from 'react-router-dom';\nimport css from './Auth.module.css';\nimport { Register } from './Register';\nimport { Login } from './Login';\n\nexport const AuthNav = () => {\n  const { id } = useParams();\n\n  return (\n    <div className={css.authForm}>\n      <div className={css.authNav}>\n        <NavLink\n          className={`${css.authLink1} ${\n            id === 'register' ? css.linkActive : ''\n          }`}\n          to=\"/auth/register\"\n        >\n          Registration\n        </NavLink>\n        <NavLink\n          className={`${css.authLink2} ${id === 'login' ? css.linkActive : ''}`}\n          to=\"/auth/login\"\n        >\n          Log In\n        </NavLink>\n        {id === 'register' ? <Register /> : <Login />}\n      </div>\n    </div>\n  );\n};\n","import { AuthNav } from 'components/Auth/AuthNav';\nimport css from '../../components/Auth/Auth.module.css';\n\nconst AuthPage = () => {\n  return (\n    <div className={css.authPageWrapper}>\n      <AuthNav />\n    </div>\n  );\n};\n\n\nexport default AuthPage\n\n"],"names":["schema","Yup","shape","name","min","max","required","email","matches","password","Register","dispatch","useDispatch","isLoading","useSelector","state","auth","isRefreshing","passwordVisible","setPasswordVisible","useState","handleClickPasswordVisibility","_jsxs","_Fragment","children","_jsx","className","css","Spinner","Formik","initialValues","validationSchema","onSubmit","e","registerThunk","handleSubmit","_ref","errors","touched","Form","Field","type","placeholder","ErrorMessage","errorMsg","concat","id","onClick","href","sprite","Login","loginThunk","autoComplete","AuthNav","useParams","NavLink","to","AuthPage"],"sourceRoot":""}